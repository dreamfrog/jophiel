
class Category(models.Model):
    """
    Categories are populated by collections of feeds and/or other categories.
    """
    name = models.CharField(max_length=100)
    slug = models.SlugField(unique=True)
    parent = models.ForeignKey('self', null=True, blank=True, default=None,
        related_name='children', verbose_name='Parent')
    
    # allow categories to include articles from other categories
    include_categories = models.ManyToManyField('self', symmetrical=False,
        through='CategoryRelationship', related_name='including_categories')
    
    # cached field, updated on save
    url_path = models.CharField(max_length=255, editable=False, db_index=True)
    level = models.IntegerField(default=0, editable=False)
    
    class Meta:
        verbose_name_plural = 'categories'
        ordering = ('url_path',)

    def __unicode__(self):
        return u'%s' % self.url_path
    
    def save(self, *args, **kwargs):
        if self.parent:
            # denormalize a path to this category and store its depth
            self.level = self.parent.level + 1
            url_path = '%s%s/' % (self.parent.url_path, self.slug)
        else:
            self.level = 0
            url_path = '%s/' % (self.slug)
 
        self.url_path = url_path
        
        super(Category, self).save(*args, **kwargs)
        
        # update all subcategories in case the url_path changed
        if self.children:
            def update_children(children):
                for child in children:
                    child.save()
                    if child.children:
                        update_children(child.children.all())
            update_children(self.children.all())

    @models.permalink
    def get_absolute_url(self):
        return ('news_article_index', None, {'url_path': self.url_path})


class CategoryRelationship(models.Model):
    """
    Allow a category to include articles from other categories\
    """
    category = models.ForeignKey(Category, related_name='categories')
    included_category = models.ForeignKey(Category, 
        related_name='included_categories')

        
            def get_categories_for_article(self, article):
        # what categories will this article get added to?    
        matching_categories = []
        
def handle_subcategories(category):
    for category_rel in CategoryRelationship.objects.filter(included_category=category):
        whitelist_qs = category_rel.white_list.all()
        if self.article_passes(article, whitelist_qs):
            matching_categories.append(category_rel.category)
        handle_subcategories(category_rel.category)

	# iterate over the categories associated with this feed
	for category in self.categories.all():
	    rel = FeedCategoryRelationship.objects.get(feed=self, category=category)
	    if self.article_passes(article, rel.white_list.all()):
	        matching_categories.append(category)
	        handle_subcategories(category)
	
	return matching_categories

def article_passes(self, article, whitelist_queryset):
    keywords = []
    
    # build up a list of all the keywords specified by the relationship
    # between this feed and the category
    for white_list in whitelist_queryset:
        keywords.extend(white_list.get_keyword_list())
    
    if keywords:
        regex = re.compile(r'(%s)' % '|'.join(keywords), re.I)
        if not regex.search(article.headline):
            return False
    
    return True
    
class FeedCategoryRelationship(models.Model):
    feed = models.ForeignKey(Feed)
    category = models.ForeignKey(Category)