import LogModule 

DEFAULT_LOGNAME="DataCluster"
logger=LogModule.getLogger(DEFAULT_LOGNAME)

class BaseCluster:
    def __init__ (self,relations=[]):
        self._relationGroup=relations

    def getRelationGroup (self):
        return self._relationGroup

    def isSubCluster (self,cluster):
        groups=cluster.getRelationGroup()
        for relationId in self._relationGroup :
            if not relationId in groups:
                return False
        return True

    def equal (self,cluster):
        if len(self.getRelationGroup())==len(cluster.getRelationGroup()):
            for relationId in cluster.getRelationGroup():
                if relationId not in self._relationGroup:
                    return False
            return True
        return False

    def isOnly (self):
        if len(self._relationGroup)==1:
            return True
        return False

    def removeIds (self,ids):
        for id in ids:
            if id in self._relationGroup:
                self._relationGroup.remove(id)
        return ids

class Cluster(BaseCluster):
    def __init__ (self,clusterId=0,relationGroup=[]):
        self._clusterId=clusterId
        BaseCluster.__init__(self,relationGroup)

    def isExist (self):
        return self._clusterId!=0
    
    def isClusterId (self,clusterId):
        return clusterId!=0

    def getClusterId (self):
        return self._clusterId

    def delete (self):
        self._clusterId=0

    """need consider more"""
    def equal (self,c):
        if self._clusterId!=0 and c._clusterId!=0:
            if self._clusterId==c._clusterId :
                return True
        else:
            if self._clusterId==0 and c._clusterId==0:
                if BaseCluster.equal(self,c):
                    return True
                else:
                    return False
            else:
                return False

    """combine the inputCluster relation with self"""
    def combineClusterGroup(self,inCluster):
        relations=inCluster.getRelationGroup()
        for relationId in relations :
            if relationId not in self._relationGroup:
                self._relationGroup.append(relationId)
        return self
    def __str__ (self):
        return "[%d]:%s"%(self.getClusterId(),self.getRelationGroup())

class ClusterSet:
    def __init__ (self):
        self._groups=[]

    def addCluster (self,cluster):
        for item in self._groups :
            if item.equal(cluster):
                return False
        self._groups.append(cluster)
        return True

    def isInClusterSet (self,cluster):
        for item in self._groups :
            if item.equal(cluster):
                return True
        return False

    def getItems (self):
        return self._groups
        
""" combine the cluster set to form the new set"""                
class CombineCluster(Cluster):
    def __init__(self,clusterId,relationGroup=[]):
        Cluster.__init__(self,clusterId,relationGroup)
        self._clusterSet=ClusterSet()
        self._isCombine=False
        self._primeCluster=None

    def addCluster (self,cluster):
        if not self._clusterSet.isInClusterSet(cluster):
            self.combineClusterGroup(cluster) 
            if self._primeCluster==None and cluster.isExist():
                self._primeCluster=cluster
            else:
                self._clusterSet.addCluster(cluster)
           
    def getClusterSet (self):
        return self._clusterSet

    def getClusterId (self):
        if self._primeCluster !=None:
            return self._primeCluster.getClusterId()
        else:
            return self._clusterId

    def isEqualOrig (self):
        if self._primeCluster!=None and self.getClusterId()==self._primeCluster.getClusterId() :
            if BaseCluster.equal(self,self._primeCluster):
                return True
        return False
            
class Clusters:
    def __init__ (self,database,clusterIndex):
        self._groups={}
        self._clusterIndex=clusterIndex
        self._db=database

    def findClusterById (self,primeId):
        clusterId=self._clusterIndex.findClusterId(primeId)
        relationGroup=[primeId]
        if clusterId!=0:
            relationGroup=self._db.getClusterGroupById(clusterId)
        return Cluster(clusterId,relationGroup)

    def findClusterByClusterId (self,clusterId):
        relationGroup=self._db.getClusterGroupById(clusterId)
        return Cluster(clusterId,relationGroup)

    def insertCluster (self,cluster):
        clusterId=cluster.getClusterId()
        relationGroup=cluster.getRelationGroup()
        return self._db.insertCluster(clusterId,relationGroup)

    def modifyCluster (self,cluster):
        clusterId=cluster.getClusterId()
        relationGroup=cluster.getRelationGroup()
        return self._db.modifyCluster(clusterId,relationGroup)

    def deleteCluster (self,cluster):
        if cluster.isExist():
            clusterId=cluster.getClusterId()
            self._db.deleteCluster(clusterId)

    def createNewCluster (self):
        clusterId=self._db.getNewClusterId()
        return Cluster(clusterId,[])

    def createNewCombineCluster (self):
        clusterId=self._db.getNewClusterId()
        return CombineCluster(clusterId,[])


class ClusterIndex:
    def __init__ (self,db):
        self._db=db

    def findClusterId (self,primeId):
        return self._db.findClusterId(primeId)

    def insertIndex (self,clusterId,relations):
        for relationId in relations:
            self._db.insertIndex(relationId,clusterId)

    def modifyIndex (self,clusterId,relations):
        self._db.modifyIndex(clusterId,relations)

    def modifyClusterIndex (self,cluster):
        clusterId=cluster.getClusterId()
        relations=cluster.getRelationGroup()
        self.modifyIndex(clusterId,relations)

    def deleteClusterIndex(self, relations):
        for relationId in relations :
            self._db.deleteIndex(relationId)

if __name__=="__main__":
    print "end"